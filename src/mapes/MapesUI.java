package mapes;

import albuminfoprogram.Album;
import albuminfoprogram.AlbumCollection;
import albuminfoprogram.Playlist;
import albuminfoprogram.PlaylistTrack;
import albuminfoprogram.Track;
import java.awt.Color;
import java.awt.Component;
import java.awt.Image;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author mre16utu
 */
public class MapesUI extends javax.swing.JFrame {

   private final AlbumCollection myAlbumCollection;
   private String workingDir = System.getProperty("user.dir");
   // create an instance of MP3Player0 using default constructor
   private static MP3Player0 mp3;// = new MP3Player0();
   private DefaultListModel<String> playListModel;
   // Hashmap to store track title and album details of playlist items
   private HashMap<String, String> trackAlbumHashMap;
   
   /**
    * Creates new form MapesUI
    */
   public MapesUI()
   {
	initComponents();
	// Set background color of the jFrame
	this.getContentPane().setBackground(new Color(0x4c4c4c));
	// initial album collection and mp3player
	myAlbumCollection = new AlbumCollection();
	mp3 = new MP3Player0();
	// Initialise playListModel and set it as model for jListPlaylist so that 
	// playlists can be immediately built by user after album load
	playListModel = new DefaultListModel<>();
	jListPlaylist.setModel(playListModel);
	// add 'Playlist' to model in order to show user this is the playlist list
	playListModel.addElement("Playlist");
	// initialise track to album details hashmap
	trackAlbumHashMap = new HashMap<>();
   }

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents()
   {
      bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

      jButton3 = new javax.swing.JButton();
      jPanel1 = new javax.swing.JPanel();
      jScrollPane1 = new javax.swing.JScrollPane();
      jListAlbums = new javax.swing.JList<>();
      jScrollPane2 = new javax.swing.JScrollPane();
      jListPlaylist = new javax.swing.JList<>();
      jLabel1 = new javax.swing.JLabel();
      jScrollPane3 = new javax.swing.JScrollPane();
      jListTracks = new javax.swing.JList<>();
      jLabelAlbumTitleAndArtist = new javax.swing.JLabel();
      jLabel2 = new javax.swing.JLabel();
      jButton1 = new javax.swing.JButton();
      jButton2 = new javax.swing.JButton();
      jButtonSavePlaylist = new javax.swing.JButton();
      jButtonRemoveTrack = new javax.swing.JButton();
      jButtonAddTrack = new javax.swing.JButton();
      jButtonClearPlaylist = new javax.swing.JButton();
      jPanel2 = new javax.swing.JPanel();
      jButton6 = new javax.swing.JButton();
      jButton4 = new javax.swing.JButton();
      jButton7 = new javax.swing.JButton();
      jButton5 = new javax.swing.JButton();

      jButton3.setText("jButton3");

      setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
      setTitle("Music Album and Playlist Editing System");

      jPanel1.setBackground(new java.awt.Color(76, 76, 76));

      jListAlbums.setBackground(new java.awt.Color(76, 76, 76));
      jListAlbums.setForeground(new java.awt.Color(255, 255, 255));
      jListAlbums.setModel(new javax.swing.AbstractListModel<String>()
      {
         String[] strings = { "Album List" };
         public int getSize() { return strings.length; }
         public String getElementAt(int i) { return strings[i]; }
      });
      jListAlbums.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
      jListAlbums.setName("Album List"); // NOI18N
      jListAlbums.setSelectionBackground(new java.awt.Color(51, 181, 229));
      jListAlbums.addListSelectionListener(new javax.swing.event.ListSelectionListener()
      {
         public void valueChanged(javax.swing.event.ListSelectionEvent evt)
         {
            jListAlbumsValueChanged(evt);
         }
      });
      jScrollPane1.setViewportView(jListAlbums);

      jListPlaylist.setBackground(new java.awt.Color(76, 76, 76));
      jListPlaylist.setForeground(new java.awt.Color(255, 255, 255));
      jListPlaylist.setModel(new javax.swing.AbstractListModel<String>()
      {
         String[] strings = { "Playlist" };
         public int getSize() { return strings.length; }
         public String getElementAt(int i) { return strings[i]; }
      });
      jListPlaylist.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
      jListPlaylist.setSelectionBackground(new java.awt.Color(51, 181, 229));
      jListPlaylist.addListSelectionListener(new javax.swing.event.ListSelectionListener()
      {
         public void valueChanged(javax.swing.event.ListSelectionEvent evt)
         {
            jListPlaylistValueChanged(evt);
         }
      });
      jScrollPane2.setViewportView(jListPlaylist);

      jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
      jLabel1.setMinimumSize(new java.awt.Dimension(1, 1));

      jListTracks.setBackground(new java.awt.Color(76, 76, 76));
      jListTracks.setForeground(new java.awt.Color(255, 255, 255));
      jListTracks.setModel(new javax.swing.AbstractListModel<String>()
      {
         String[] strings = { "Track list for Album" };
         public int getSize() { return strings.length; }
         public String getElementAt(int i) { return strings[i]; }
      });
      jListTracks.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
      jListTracks.setSelectionBackground(new java.awt.Color(51, 181, 229));
      jListTracks.addListSelectionListener(new javax.swing.event.ListSelectionListener()
      {
         public void valueChanged(javax.swing.event.ListSelectionEvent evt)
         {
            jListTracksValueChanged(evt);
         }
      });
      jScrollPane3.setViewportView(jListTracks);

      jLabelAlbumTitleAndArtist.setBackground(new java.awt.Color(76, 76, 76));
      jLabelAlbumTitleAndArtist.setForeground(new java.awt.Color(255, 255, 255));
      jLabelAlbumTitleAndArtist.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

      jLabel2.setText("jLabel2");

      javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
      jPanel1.setLayout(jPanel1Layout);
      jPanel1Layout.setHorizontalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
               .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 423, Short.MAX_VALUE)
               .addComponent(jLabelAlbumTitleAndArtist, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jScrollPane2)
               .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addContainerGap())
      );
      jPanel1Layout.setVerticalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                  .addComponent(jLabelAlbumTitleAndArtist, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE))
               .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                  .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addContainerGap())
      );

      jLabelAlbumTitleAndArtist.getAccessibleContext().setAccessibleName("jLabelAlbumTitleAndArtist");
      jLabelAlbumTitleAndArtist.getAccessibleContext().setAccessibleDescription("");

      jButton1.setBackground(new java.awt.Color(76, 76, 76));
      jButton1.setForeground(new java.awt.Color(255, 255, 255));
      jButton1.setText("Load Albums");
      jButton1.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            jButtonLoadAlbumsActionPerformed(evt);
         }
      });

      jButton2.setBackground(new java.awt.Color(76, 76, 76));
      jButton2.setForeground(new java.awt.Color(255, 255, 255));
      jButton2.setText("Load Playlist");
      jButton2.setToolTipText("");
      jButton2.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            jButtonLoadPlaylistActionPerformed(evt);
         }
      });

      jButtonSavePlaylist.setBackground(new java.awt.Color(76, 76, 76));
      jButtonSavePlaylist.setForeground(new java.awt.Color(255, 255, 255));
      jButtonSavePlaylist.setText("Save Playlist");
      jButtonSavePlaylist.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            jButtonSavePlaylistActionPerformed(evt);
         }
      });

      jButtonRemoveTrack.setText("<<");
      jButtonRemoveTrack.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            jButtonRemoveTrackActionPerformed(evt);
         }
      });

      jButtonAddTrack.setText(">>");
      jButtonAddTrack.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            jButtonAddTrackActionPerformed(evt);
         }
      });

      jButtonClearPlaylist.setText("Clear Playlist");
      jButtonClearPlaylist.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            jButtonClearPlaylistActionPerformed(evt);
         }
      });

      jPanel2.setBackground(new java.awt.Color(76, 76, 76));
      jPanel2.setForeground(new java.awt.Color(76, 76, 76));

      org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jListTracks, org.jdesktop.beansbinding.ELProperty.create("${alignmentX}"), jPanel2, org.jdesktop.beansbinding.BeanProperty.create("alignmentX"));
      bindingGroup.addBinding(binding);

      jButton6.setText("Back");

      jButton4.setText("Play");
      jButton4.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            jButtonPlayActionPerformed(evt);
         }
      });

      jButton7.setText("Stop");
      jButton7.setToolTipText("");
      jButton7.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            jButtonStopActionPerformed(evt);
         }
      });

      jButton5.setText("Forward");

      javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
      jPanel2.setLayout(jPanel2Layout);
      jPanel2Layout.setHorizontalGroup(
         jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel2Layout.createSequentialGroup()
            .addGap(83, 83, 83)
            .addComponent(jButton6)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jButton4)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jButton7)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jButton5)
            .addContainerGap(85, Short.MAX_VALUE))
      );
      jPanel2Layout.setVerticalGroup(
         jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jButton6)
               .addComponent(jButton4)
               .addComponent(jButton7)
               .addComponent(jButton5)))
      );

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGap(80, 80, 80)
            .addComponent(jButton1)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButton2)
            .addGap(18, 18, 18)
            .addComponent(jButtonSavePlaylist)
            .addGap(21, 21, 21))
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addGap(248, 248, 248)
                  .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(18, 18, Short.MAX_VALUE)
                  .addComponent(jButtonRemoveTrack)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jButtonClearPlaylist)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jButtonAddTrack)
                  .addGap(29, 29, 29))
               .addGroup(layout.createSequentialGroup()
                  .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addContainerGap())))
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jButton1)
               .addComponent(jButton2)
               .addComponent(jButtonSavePlaylist))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
               .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                  .addComponent(jButtonRemoveTrack)
                  .addComponent(jButtonClearPlaylist)
                  .addComponent(jButtonAddTrack))
               .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap())
      );

      jButtonSavePlaylist.getAccessibleContext().setAccessibleDescription("");

      bindingGroup.bind();

      pack();
   }// </editor-fold>//GEN-END:initComponents

   
   /**
    * Method to loop through folder and all subfolders and add mp3 files found 
    * to list
    * @param files
    * @param folder 
    */
   private void getMp3AllSubDirs(List<File> files, File folder)
   {
	// get list of all files in folder
	File[] fileList = folder.listFiles();
	// loop over list of files check for file or directory
	for(File file : fileList)
	{
//	   System.out.println(file.getName());
	   // if file, check its mp3 and if so add to the list
	   if(file.isFile())
	   {
		String ext = file.getName();
		ext = ext.substring(ext.lastIndexOf(".") + 1);
		if(ext.equals("mp3"))
		{
		   files.add(file);
		}
	   }
	   // if file is a directory, call this method again to look for files 
	   // further down that branch
	   else if(file.isDirectory())
	   {
		getMp3AllSubDirs(files, file);
	   }
	}
   }
   
   
   
   private void jButtonPlayActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonPlayActionPerformed
   {//GEN-HEADEREND:event_jButtonPlayActionPerformed
	System.out.println("Play Track");

	// Get selected track title from tracklist or playlist
	String trackTitle = null;
	if(jListTracks.getSelectedIndex() > -1)
	{
	   trackTitle = jListTracks.getSelectedValue();
	}
	else if (jListPlaylist.getSelectedIndex() > -1)
	{
	   trackTitle = jListPlaylist.getSelectedValue();
	}
	
	
	if(trackTitle != null && trackTitle != "Playlist")
	{
	   // remove duration from track title
	   trackTitle = trackTitle.split("-", 2)[1].trim();
	   // convert trackTitle to audio file name format
	   trackTitle = trackTitle.replaceAll(" ", "_").toLowerCase();
	   System.out.println(trackTitle);


	   File folder = new File(workingDir + "/audio/");
	   System.out.println(folder);

	   // create list to store all mp3 files 
	   List<File> files = new ArrayList<>();


	   getMp3AllSubDirs(files, folder);
	   File mp3File = null;
	   boolean fileFound = false;
	   for(File file : files)
	   {
		System.out.println(file.getName());
		if(file.getName().toLowerCase().contains("_" + trackTitle + ".mp3"))
		{
		   mp3File = file;
		   fileFound = true;
		   break;
		}
	   }
	   
	   if(fileFound)
	   {
		mp3.close();
		mp3.play(mp3File.getAbsolutePath());
	   System.out.println("Playing mp3 file:" + mp3File.getName());
	   }
	   else
	   {
		System.out.println("Track file not found");
	   }
	   
	}
	else
	{
	   System.out.println("No track selected");
	}

   }//GEN-LAST:event_jButtonPlayActionPerformed

   private void jButtonLoadAlbumsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonLoadAlbumsActionPerformed
   {//GEN-HEADEREND:event_jButtonLoadAlbumsActionPerformed
	System.out.println("Loading albums");

	// prompt user to select text file containing album data
	String filename = getTextFilePath("LOAD");
	// read album data into program and add to album collection
	myAlbumCollection.readAlbumCollectionFromFile(filename);
	// List albums in jList
	DefaultListModel<String> albumList = new DefaultListModel<>();
	jListAlbums.setModel(albumList);
	for (Album album : myAlbumCollection.getAlbums())
	{
	   albumList.addElement(album.getAlbumArtist() + " : " + album.getAlbumTitle());
	}
   }//GEN-LAST:event_jButtonLoadAlbumsActionPerformed

   private void jButtonLoadPlaylistActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonLoadPlaylistActionPerformed
   {//GEN-HEADEREND:event_jButtonLoadPlaylistActionPerformed
	System.out.println("Loading playlist");

	// prompt user to select text file containing playlist info
	String filename = getTextFilePath("LOAD");
	// create new playlist object and read playlist data into it
	Playlist playlist = new Playlist(myAlbumCollection);
	playlist.loadPlaylist(filename);
	// List playlist tracks in jList
	playListModel = new DefaultListModel<>();
	jListPlaylist.setModel(playListModel);
	for (PlaylistTrack track : playlist.getPlaylistTracks())
	{
	   playListModel.addElement(track.getTrackDuration() + " - " + track.getTrackTitle());
	}
   }//GEN-LAST:event_jButtonLoadPlaylistActionPerformed

   private void jButtonStopActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonStopActionPerformed
   {//GEN-HEADEREND:event_jButtonStopActionPerformed
	// TODO add your handling code here:
	System.out.println("stopping mp3");
	mp3.close();
   }//GEN-LAST:event_jButtonStopActionPerformed

   private void jListAlbumsValueChanged(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_jListAlbumsValueChanged
   {//GEN-HEADEREND:event_jListAlbumsValueChanged
	// TODO add your handling code here:
	//System.out.println("Item selected" + jListAlbums.getSelectedValue());
	DefaultListModel<String> albumDetailsList = new DefaultListModel<>();
	jListTracks.setModel(albumDetailsList);

	// Get selected album title from album list
	String albumTitle = jListAlbums.getSelectedValue();
	
	// Do nothing if 'Album List' placeholder selected
	if (albumTitle != null && !albumTitle.equals("Album List"))
	{
	   albumTitle = albumTitle.split(":", 2)[1].trim();
	   Album album = myAlbumCollection.getAlbumByTitle(albumTitle);
	   String albumArtist = album.getAlbumArtist();

//	   // print album details to list - using html allows line breaks
//	   jLabelAlbumTitleAndArtist.setText("<html><body>Album Title &emsp;: "
//		     + albumTitle + "<br>Album Artist&emsp;: "
//		     + albumArtist + "<br>Album Duration&emsp;: "
//		     + album.getAlbumDuration() + "</body></html>");
	   jLabelAlbumTitleAndArtist.setText(albumArtist + " : " + albumTitle 
				     + " (Duration: " + album.getAlbumDuration() + ")");

	   for (Track track : album.getTracks())
	   {
		albumDetailsList.addElement(track.getTrackDuration() + " - "
									+ track.getTrackTitle());
	   }

	   // initiate a new image icon to display album cover
	   ImageIcon image = new ImageIcon();
	   // get list of image files
	   File folder = new File(workingDir + "/images/");
	   System.out.println(folder);

	   File[] fileList = folder.listFiles();
	   //List<File> fileList = new ArrayList<>(Arrays.asList(folder.listFiles()));

	   for (File file : fileList)
	   {
		// check file is a file and not a directory
		if (file.isFile())
		{
		   String fileName = file.getName();
		   //System.out.println("Filename: " + fileName);
		   String shortTitle = albumTitle.toLowerCase();

		   // remove certain key words as 'special' examples. This is a 
		   // system limitation and may not be robust. Consider renaming 
		   // image files to consistent format and/or including artist in 
		   // key string search
		   // remove 'the' or 'neils' from start of album title
		   if (shortTitle.startsWith("the "))
		   {
			shortTitle = shortTitle.substring(4, shortTitle.length());
		   } else if (shortTitle.startsWith("neil's "))
		   {
			shortTitle = shortTitle.substring(7, shortTitle.length());
		   }
		   // remove trailing 'music' or 'album'
		   if (shortTitle.endsWith(" album")
			     || shortTitle.endsWith(" music"))
		   {
			shortTitle = shortTitle.substring(0, shortTitle.length() - 6);
		   }

		   // remove white space and special characters
		   shortTitle = shortTitle.replaceAll("\\s+", "").replaceAll(
			     "[-+.^:,?']", "").toLowerCase();

		   // TODO include artist in file title search
		   if (fileName.toLowerCase().contains(shortTitle))
		   {
			//System.out.println("Match found");
			ImageIcon tempImage = new ImageIcon(workingDir
				  + "/images/" + fileName);
			image = getScaledImage(tempImage, jLabel1);
		   }
		}
	   }
	   jLabel1.setIcon(image);
	}
   }//GEN-LAST:event_jListAlbumsValueChanged

   private void jListTracksValueChanged(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_jListTracksValueChanged
   {//GEN-HEADEREND:event_jListTracksValueChanged
	// Clear playlist selection if item being selected in tracks list. Ensure 
	// this is not triggered by a deselect event from playlistValueChanged
	if(jListTracks.getValueIsAdjusting())
	{
	   jListPlaylist.clearSelection();
	}
	
   }//GEN-LAST:event_jListTracksValueChanged

   // Clear track list selection if item being selected in playlist. Ensure 
   // this is not triggered by a deselect event from TracksValueChanged
   private void jListPlaylistValueChanged(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_jListPlaylistValueChanged
   {//GEN-HEADEREND:event_jListPlaylistValueChanged
	// TODO add your handling code here:
	if(jListPlaylist.getValueIsAdjusting())
	{
	   jListTracks.clearSelection();
	}
	
   }//GEN-LAST:event_jListPlaylistValueChanged

   private void jButtonSavePlaylistActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonSavePlaylistActionPerformed
   {//GEN-HEADEREND:event_jButtonSavePlaylistActionPerformed
	try
	{
	   // TODO get tracks from playlist and save as file:
	   String filename = getTextFilePath("SAVE");
	   if(!filename.endsWith(".txt"))
	   {
		filename += ".txt";
	   }
	   BufferedWriter bw = new BufferedWriter(new FileWriter(filename));
	   
	   int iMax = playListModel.getSize();
	   for (int i = 0; i < iMax; i++)
	   {
		String trackStr = playListModel.getElementAt(i);
		String[] split = trackStr.split(" - ", 2);
		String track = split[1];
		System.out.println("Track: " + track);
//		String duration = split[0];

		//String albumStr = trackAlbumHashMap.get(track);
		track += " (" + trackAlbumHashMap.get(trackStr) + ")";
//		
//		myAlbumCollection.getAlbumByTitle(track);
		// Write output to bufferedWriter
		bw.write(track);
		bw.newLine();
	   }
	   bw.flush();
	} 
	catch (Exception ex)
	{
	   Logger.getLogger(MapesUI.class.getName()).log(Level.SEVERE, null, ex);
	}
	
   }//GEN-LAST:event_jButtonSavePlaylistActionPerformed

   private void jButtonAddTrackActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonAddTrackActionPerformed
   {//GEN-HEADEREND:event_jButtonAddTrackActionPerformed
      // Add a track from list of album tracks to the playlist
	if(playListModel.getSize() == 1 && 
					    playListModel.elementAt(0).equals("Playlist"))
	{
	   playListModel.removeElementAt(0);
	}
	playListModel.addElement(jListTracks.getSelectedValue());
	
	// Store track title and album details of playlist items in hashmap
	System.out.println("Adding: " + jListTracks.getSelectedValue()+ ", " +
							      jListAlbums.getSelectedValue());
	trackAlbumHashMap.put(jListTracks.getSelectedValue(),
							      jListAlbums.getSelectedValue());
	System.out.println(trackAlbumHashMap.get(jListTracks.getSelectedValue()));
   }//GEN-LAST:event_jButtonAddTrackActionPerformed

   private void jButtonRemoveTrackActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonRemoveTrackActionPerformed
   {//GEN-HEADEREND:event_jButtonRemoveTrackActionPerformed
      // Remove track from playlist and tracking hashmap if track selected
	if(jListPlaylist.getSelectedIndex() > -1)
	{
	   playListModel.remove(jListPlaylist.getSelectedIndex());
	   trackAlbumHashMap.remove(jListPlaylist.getSelectedValue());
	}
	
   }//GEN-LAST:event_jButtonRemoveTrackActionPerformed

   private void jButtonClearPlaylistActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonClearPlaylistActionPerformed
   {//GEN-HEADEREND:event_jButtonClearPlaylistActionPerformed
      // TODO add your handling code here:
	playListModel.clear();
	trackAlbumHashMap.clear();
   }//GEN-LAST:event_jButtonClearPlaylistActionPerformed

   // Method to get scaled dimensions of album cover
   private ImageIcon getScaledImage(ImageIcon image, JLabel jLabel)
   {
	// variables to store image and label dimensions
	int imageWidth = image.getIconWidth();
	int imageHeight = image.getIconHeight();
	int labelWidth = jLabel.getWidth();
	int labelHeight = jLabel.getHeight();
	System.out.println(imageWidth + ", " + imageHeight + ", " + labelWidth
		  + ", " + labelHeight);
	// variables to store scaled dimensions
	int scaledWidth;
	int scaledHeight;

	// match width of image to width of label
	scaledWidth = labelWidth;
	scaledHeight = (int) (imageHeight * (labelWidth / (float) imageWidth));

	// if height too great, scale image down to fit height to window
	if (scaledHeight > labelHeight)
	{
	   scaledWidth = (int) (scaledWidth
		     * (labelHeight / (float) scaledHeight));
	   scaledHeight = labelHeight;
	}

	// create and return scaled image
	return new ImageIcon(image.getImage().getScaledInstance(scaledWidth,
		  scaledHeight, Image.SCALE_SMOOTH));
   }

   private String getTextFilePath(String option)
   {
	// use JFileChooser to select album text file
	try
	{
	   String filename = "";
	   // launch file chooser in current working directory
	   JFileChooser fileChooser = new JFileChooser(workingDir);
	   FileFilter filter = new FileNameExtensionFilter("Text File", "txt");
	   fileChooser.setFileFilter(filter);

	   Component c1 = null;
	   
	   if(option.equals("LOAD"))
	   {
		fileChooser.showOpenDialog(c1);
	   }
	   else if(option.equals("SAVE"))
	   {
		fileChooser.showSaveDialog(c1);
	   }
	   
	   

	   File albumListing = fileChooser.getSelectedFile();
	   filename = albumListing.getAbsolutePath();

	   workingDir = albumListing.getParentFile().getAbsolutePath();

	   System.out.println(filename);
	   System.out.println(workingDir);

	   //check the file format 
	   String fileType = fileChooser.getTypeDescription(albumListing);
	   System.out.println("file type = " + fileType);

	   return filename;
	} catch (Exception e)
	{
	   System.err.println(e);
	}
	return null;
   }

   /**
    * @param args the command line arguments
    */
   public static void main(String args[])
   {
	/* Set the Nimbus look and feel */
	//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
	/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
	 */
	try
	{
	   for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
	   {
		if ("Nimbus".equals(info.getName()))
		{
		   javax.swing.UIManager.setLookAndFeel(info.getClassName());
		   break;
		}
	   }
	} catch (ClassNotFoundException ex)
	{
	   java.util.logging.Logger.getLogger(MapesUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (InstantiationException ex)
	{
	   java.util.logging.Logger.getLogger(MapesUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (IllegalAccessException ex)
	{
	   java.util.logging.Logger.getLogger(MapesUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (javax.swing.UnsupportedLookAndFeelException ex)
	{
	   java.util.logging.Logger.getLogger(MapesUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	}
	//</editor-fold>

	/* Create and display the form */
	java.awt.EventQueue.invokeLater(new Runnable() {
	   public void run()
	   {
		new MapesUI().setVisible(true);
	   }
	});
   }

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton jButton1;
   private javax.swing.JButton jButton2;
   private javax.swing.JButton jButton3;
   private javax.swing.JButton jButton4;
   private javax.swing.JButton jButton5;
   private javax.swing.JButton jButton6;
   private javax.swing.JButton jButton7;
   private javax.swing.JButton jButtonAddTrack;
   private javax.swing.JButton jButtonClearPlaylist;
   private javax.swing.JButton jButtonRemoveTrack;
   private javax.swing.JButton jButtonSavePlaylist;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabelAlbumTitleAndArtist;
   private javax.swing.JList<String> jListAlbums;
   private javax.swing.JList<String> jListPlaylist;
   private javax.swing.JList<String> jListTracks;
   private javax.swing.JPanel jPanel1;
   private javax.swing.JPanel jPanel2;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JScrollPane jScrollPane2;
   private javax.swing.JScrollPane jScrollPane3;
   private org.jdesktop.beansbinding.BindingGroup bindingGroup;
   // End of variables declaration//GEN-END:variables
}
