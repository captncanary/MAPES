package mapes;

import albuminfoprogram.Album;
import albuminfoprogram.AlbumCollection;
import albuminfoprogram.Playlist;
import albuminfoprogram.PlaylistTrack;
import albuminfoprogram.Track;
import java.awt.Component;
import java.awt.Image;
import java.io.File;
import java.util.*;
import javax.swing.*;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author mre16utu
 */
public class MapesUI extends javax.swing.JFrame {

   private AlbumCollection myAlbumCollection;
   private String workingDir = System.getProperty("user.dir");
   // create an instance of MP3Player0 using default constructor
   private static MP3Player0 mp3 = new MP3Player0();

   /**
    * Creates new form MapesUI
    */
   public MapesUI()
   {
	initComponents();
	myAlbumCollection = new AlbumCollection();
	mp3 = new MP3Player0();
   }

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents()
   {

      jButton3 = new javax.swing.JButton();
      jPanel1 = new javax.swing.JPanel();
      jScrollPane1 = new javax.swing.JScrollPane();
      jListAlbums = new javax.swing.JList<>();
      jScrollPane2 = new javax.swing.JScrollPane();
      jListPlaylist = new javax.swing.JList<>();
      jLabel1 = new javax.swing.JLabel();
      jScrollPane3 = new javax.swing.JScrollPane();
      jListTracks = new javax.swing.JList<>();
      jLabelAlbumTitleAndArtist = new javax.swing.JLabel();
      jButton1 = new javax.swing.JButton();
      jButton2 = new javax.swing.JButton();
      jButton4 = new javax.swing.JButton();
      jButton5 = new javax.swing.JButton();
      jButton6 = new javax.swing.JButton();
      jButton7 = new javax.swing.JButton();

      jButton3.setText("jButton3");

      setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

      jListAlbums.setModel(new javax.swing.AbstractListModel<String>()
      {
         String[] strings = { "Album List" };
         public int getSize() { return strings.length; }
         public String getElementAt(int i) { return strings[i]; }
      });
      jListAlbums.setName("Album List"); // NOI18N
      jListAlbums.addListSelectionListener(new javax.swing.event.ListSelectionListener()
      {
         public void valueChanged(javax.swing.event.ListSelectionEvent evt)
         {
            jListAlbumsValueChanged(evt);
         }
      });
      jScrollPane1.setViewportView(jListAlbums);

      jListPlaylist.setModel(new javax.swing.AbstractListModel<String>()
      {
         String[] strings = { "Playlist" };
         public int getSize() { return strings.length; }
         public String getElementAt(int i) { return strings[i]; }
      });
      jListPlaylist.addListSelectionListener(new javax.swing.event.ListSelectionListener()
      {
         public void valueChanged(javax.swing.event.ListSelectionEvent evt)
         {
            jListPlaylistValueChanged(evt);
         }
      });
      jScrollPane2.setViewportView(jListPlaylist);

      jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
      jLabel1.setMinimumSize(new java.awt.Dimension(1, 1));

      jListTracks.setModel(new javax.swing.AbstractListModel<String>()
      {
         String[] strings = { "Track list for Album" };
         public int getSize() { return strings.length; }
         public String getElementAt(int i) { return strings[i]; }
      });
      jListTracks.addListSelectionListener(new javax.swing.event.ListSelectionListener()
      {
         public void valueChanged(javax.swing.event.ListSelectionEvent evt)
         {
            jListTracksValueChanged(evt);
         }
      });
      jScrollPane3.setViewportView(jListTracks);

      javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
      jPanel1.setLayout(jPanel1Layout);
      jPanel1Layout.setHorizontalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(jScrollPane3)
               .addComponent(jLabelAlbumTitleAndArtist, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
      );
      jPanel1Layout.setVerticalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                  .addComponent(jLabelAlbumTitleAndArtist, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE))
               .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
               .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
            .addContainerGap())
      );

      jLabelAlbumTitleAndArtist.getAccessibleContext().setAccessibleName("jLabelAlbumTitleAndArtist");
      jLabelAlbumTitleAndArtist.getAccessibleContext().setAccessibleDescription("");

      jButton1.setText("Load Albums");
      jButton1.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            jButtonLoadAlbumsActionPerformed(evt);
         }
      });

      jButton2.setText("Load Playlist");
      jButton2.setToolTipText("");
      jButton2.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            jButtonLoadPlaylistActionPerformed(evt);
         }
      });

      jButton4.setText("Play");
      jButton4.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            jButtonPlayActionPerformed(evt);
         }
      });

      jButton5.setText("Forward");

      jButton6.setText("Back");

      jButton7.setText("Stop");
      jButton7.setToolTipText("");
      jButton7.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            jButtonStopActionPerformed(evt);
         }
      });

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap())
         .addGroup(layout.createSequentialGroup()
            .addGap(304, 304, 304)
            .addComponent(jButton6)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jButton4)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButton7)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jButton5)
            .addGap(300, 300, 300))
         .addGroup(layout.createSequentialGroup()
            .addGap(80, 80, 80)
            .addComponent(jButton1)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButton2)
            .addGap(72, 72, 72))
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jButton1)
               .addComponent(jButton2))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jButton4)
               .addComponent(jButton5)
               .addComponent(jButton6)
               .addComponent(jButton7))
            .addContainerGap())
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents

   
   /**
    * Method to loop through folder and all subfolders and add mp3 files found 
    * to list
    * @param files
    * @param folder 
    */
   private void getMp3AllSubDirs(List<File> files, File folder)
   {
	// get list of all files in folder
	File[] fileList = folder.listFiles();
	// loop over list of files check for file or directory
	for(File file : fileList)
	{
//	   System.out.println(file.getName());
	   // if file, check its mp3 and if so add to the list
	   if(file.isFile())
	   {
		String ext = file.getName();
		ext = ext.substring(ext.lastIndexOf(".") + 1);
		if(ext.equals("mp3"))
		{
		   files.add(file);
		}
	   }
	   // if file is a directory, call this method again to look for files 
	   // further down that branch
	   else if(file.isDirectory())
	   {
		getMp3AllSubDirs(files, file);
	   }
	}
   }
   
   
   
   private void jButtonPlayActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonPlayActionPerformed
   {//GEN-HEADEREND:event_jButtonPlayActionPerformed
	System.out.println("Play Track");

	// Get selected album title from album list
	String trackTitle = jListTracks.getSelectedValue();
	trackTitle = trackTitle.replaceAll(" ", "_");
	System.out.println(trackTitle);

	
	File folder = new File(workingDir + "/audio/");
	System.out.println(folder);

	// create list to store all mp3 files 
	List<File> files = new ArrayList<>();


	getMp3AllSubDirs(files, folder);
	File mp3File = null;
	
	for(File file : files)
	{
	   System.out.println(file.getName());
	   if(file.getName().contains(trackTitle + ".mp3"))
	   {
		mp3File = file;
		break;
	   }
	}

	//MP3Player0 mp3 = new MP3Player0(filename); 
	
	mp3.play(mp3File.getAbsolutePath());
	System.out.println("Playing mp3 file:" + mp3File.getName());
	
	// close works at this point
	//mp3.close();


   }//GEN-LAST:event_jButtonPlayActionPerformed

   private void jButtonLoadAlbumsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonLoadAlbumsActionPerformed
   {//GEN-HEADEREND:event_jButtonLoadAlbumsActionPerformed
	System.out.println("Loading albums");

	// prompt user to select text file containing album data
	String filename = getTextFilePath();
	// read album data into program and add to album collection
	myAlbumCollection.readAlbumCollectionFromFile(filename);
	// List albums in jList
	DefaultListModel<String> albumList = new DefaultListModel<>();
	jListAlbums.setModel(albumList);
	for (Album album : myAlbumCollection.getAlbums())
	{
	   albumList.addElement(album.getAlbumTitle());
	}
   }//GEN-LAST:event_jButtonLoadAlbumsActionPerformed

   private void jButtonLoadPlaylistActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonLoadPlaylistActionPerformed
   {//GEN-HEADEREND:event_jButtonLoadPlaylistActionPerformed
	System.out.println("Loading playlist");

	// prompt user to select text file containing playlist info
	String filename = getTextFilePath();
	// create new playlist object and read playlist data into it
	Playlist playlist = new Playlist(myAlbumCollection);
	playlist.loadPlaylist(filename);
	// List playlist tracks in jList
	DefaultListModel<String> playListModel = new DefaultListModel<>();
	jListPlaylist.setModel(playListModel);
	for (PlaylistTrack track : playlist.getPlaylistTracks())
	{
	   playListModel.addElement(track.getTrackTitle());
	}
   }//GEN-LAST:event_jButtonLoadPlaylistActionPerformed

   private void jButtonStopActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonStopActionPerformed
   {//GEN-HEADEREND:event_jButtonStopActionPerformed
	// TODO add your handling code here:
	System.out.println("stopping mp3");
	mp3.close();
   }//GEN-LAST:event_jButtonStopActionPerformed

   private void jListAlbumsValueChanged(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_jListAlbumsValueChanged
   {//GEN-HEADEREND:event_jListAlbumsValueChanged
	// TODO add your handling code here:
	//System.out.println("Item selected" + jListAlbums.getSelectedValue());
	DefaultListModel<String> albumDetailsList = new DefaultListModel<>();
	jListTracks.setModel(albumDetailsList);

	// Get selected album title from album list
	String albumTitle = jListAlbums.getSelectedValue();
	// Do nothing if 'Album List' placeholder selected
	if (albumTitle != null && !albumTitle.equals("Album List"))
	{
	   Album album = myAlbumCollection.getAlbumByTitle(albumTitle);
	   String albumArtist = album.getAlbumArtist();

	   // print album details to list - using html allows line breaks
	   jLabelAlbumTitleAndArtist.setText("<html><body>Album Title &emsp;: "
		     + albumTitle + "<br>Album Artist&emsp;: "
		     + albumArtist + "<br>Album Duration&emsp;: "
		     + album.getAlbumDuration() + "</body></html>");

	   for (Track track : album.getTracks())
	   {
		albumDetailsList.addElement(track.getTrackTitle());
	   }

	   // initiate a new image icon to display album cover
	   ImageIcon image = new ImageIcon();
	   // get list of image files
	   File folder = new File(workingDir + "/images/");
	   System.out.println(folder);

	   File[] fileList = folder.listFiles();
	   //List<File> fileList = new ArrayList<>(Arrays.asList(folder.listFiles()));

	   for (File file : fileList)
	   {
		// check file is a file and not a directory
		if (file.isFile())
		{
		   String fileName = file.getName();
		   //System.out.println("Filename: " + fileName);
		   String shortTitle = albumTitle.toLowerCase();

		   // remove certain key words as 'special' examples. This is a 
		   // system limitation and may not be robust. Consider renaming 
		   // image files to consistent format and/or including artist in 
		   // key string search
		   // remove 'the' or 'neils' from start of album title
		   if (shortTitle.startsWith("the "))
		   {
			shortTitle = shortTitle.substring(4, shortTitle.length());
		   } else if (shortTitle.startsWith("neil's "))
		   {
			shortTitle = shortTitle.substring(7, shortTitle.length());
		   }
		   // remove trailing 'music' or 'album'
		   if (shortTitle.endsWith(" album")
			     || shortTitle.endsWith(" music"))
		   {
			shortTitle = shortTitle.substring(0, shortTitle.length() - 6);
		   }

		   // remove white space and special characters
		   shortTitle = shortTitle.replaceAll("\\s+", "").replaceAll(
			     "[-+.^:,?']", "").toLowerCase();

		   // TODO include artist in file title search
		   if (fileName.toLowerCase().contains(shortTitle))
		   {
			//System.out.println("Match found");
			ImageIcon tempImage = new ImageIcon(workingDir
				  + "/images/" + fileName);
			image = getScaledImage(tempImage, jLabel1);
		   }
		}
	   }
	   jLabel1.setIcon(image);
	}
   }//GEN-LAST:event_jListAlbumsValueChanged

   private void jListTracksValueChanged(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_jListTracksValueChanged
   {//GEN-HEADEREND:event_jListTracksValueChanged
	// TODO add your handling code here:
	jListPlaylist.clearSelection();
   }//GEN-LAST:event_jListTracksValueChanged

   private void jListPlaylistValueChanged(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_jListPlaylistValueChanged
   {//GEN-HEADEREND:event_jListPlaylistValueChanged
	// TODO add your handling code here:
	jListTracks.clearSelection();
   }//GEN-LAST:event_jListPlaylistValueChanged

   // Method to get scaled dimensions of album cover
   private ImageIcon getScaledImage(ImageIcon image, JLabel jLabel)
   {
	// variables to store image and label dimensions
	int imageWidth = image.getIconWidth();
	int imageHeight = image.getIconHeight();
	int labelWidth = jLabel.getWidth();
	int labelHeight = jLabel.getHeight();
	System.out.println(imageWidth + ", " + imageHeight + ", " + labelWidth
		  + ", " + labelHeight);
	// variables to store scaled dimensions
	int scaledWidth;
	int scaledHeight;

	// match width of image to width of label
	scaledWidth = labelWidth;
	scaledHeight = (int) (imageHeight * (labelWidth / (float) imageWidth));

	// if height too great, scale image down to fit height to window
	if (scaledHeight > labelHeight)
	{
	   scaledWidth = (int) (scaledWidth
		     * (labelHeight / (float) scaledHeight));
	   scaledHeight = labelHeight;
	}

	// create and return scaled image
	return new ImageIcon(image.getImage().getScaledInstance(scaledWidth,
		  scaledHeight, Image.SCALE_SMOOTH));
   }

   private String getTextFilePath()
   {
	// use JFileChooser to select album text file
	try
	{
	   String filename = "";
	   // launch file chooser in current working directory
	   JFileChooser openFC = new JFileChooser(workingDir);
	   FileFilter filter = new FileNameExtensionFilter("Text File", "txt");
	   openFC.setFileFilter(filter);

	   Component c1 = null;
	   openFC.showOpenDialog(c1);

	   File albumListing = openFC.getSelectedFile();
	   filename = albumListing.getAbsolutePath();

	   workingDir = albumListing.getParentFile().getAbsolutePath();

	   System.out.println(filename);
	   System.out.println(workingDir);

	   //check the file format 
	   String fileType = openFC.getTypeDescription(albumListing);
	   System.out.println("file type = " + fileType);

	   return filename;
	} catch (Exception e)
	{
	   System.err.println(e);
	}
	return null;
   }

   /**
    * @param args the command line arguments
    */
   public static void main(String args[])
   {
	/* Set the Nimbus look and feel */
	//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
	/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
	 */
	try
	{
	   for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
	   {
		if ("Nimbus".equals(info.getName()))
		{
		   javax.swing.UIManager.setLookAndFeel(info.getClassName());
		   break;
		}
	   }
	} catch (ClassNotFoundException ex)
	{
	   java.util.logging.Logger.getLogger(MapesUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (InstantiationException ex)
	{
	   java.util.logging.Logger.getLogger(MapesUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (IllegalAccessException ex)
	{
	   java.util.logging.Logger.getLogger(MapesUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (javax.swing.UnsupportedLookAndFeelException ex)
	{
	   java.util.logging.Logger.getLogger(MapesUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	}
	//</editor-fold>

	/* Create and display the form */
	java.awt.EventQueue.invokeLater(new Runnable() {
	   public void run()
	   {
		new MapesUI().setVisible(true);
	   }
	});
   }

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton jButton1;
   private javax.swing.JButton jButton2;
   private javax.swing.JButton jButton3;
   private javax.swing.JButton jButton4;
   private javax.swing.JButton jButton5;
   private javax.swing.JButton jButton6;
   private javax.swing.JButton jButton7;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabelAlbumTitleAndArtist;
   private javax.swing.JList<String> jListAlbums;
   private javax.swing.JList<String> jListPlaylist;
   private javax.swing.JList<String> jListTracks;
   private javax.swing.JPanel jPanel1;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JScrollPane jScrollPane2;
   private javax.swing.JScrollPane jScrollPane3;
   // End of variables declaration//GEN-END:variables
}
