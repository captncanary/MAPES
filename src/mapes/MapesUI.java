package mapes;

import albuminfoprogram.Album;
import albuminfoprogram.AlbumCollection;
import albuminfoprogram.Duration;
import albuminfoprogram.Playlist;
import albuminfoprogram.PlaylistTrack;
import albuminfoprogram.Track;
import java.awt.Color;
import java.awt.Component;
import java.awt.Image;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Stephen
 */
public class MapesUI extends javax.swing.JFrame {

   private final AlbumCollection myAlbumCollection;
   private String workingDir = System.getProperty("user.dir");
   // create an instance of MP3Player0 using default constructor
   private static MP3Player0 mp3;// = new MP3Player0();
   private DefaultListModel<String> playListModel;
   // Hashmap to store track title and album details of playlist items
   private HashMap<String, String> trackAlbumHashMap;
   private Playlist playlist;
   
   /**
    * Creates new form MapesUI
    */
   public MapesUI()
   {
	initComponents();
	// Set background color of the jFrame
	this.getContentPane().setBackground(new Color(0x4c4c4c));
	// initial album collection and mp3player
	myAlbumCollection = new AlbumCollection();
	mp3 = new MP3Player0();
	// Initialise playListModel and set it as model for jListPlaylist so that 
	// playlists can be immediately built by user after album load
	playListModel = new DefaultListModel<>();
	jListPlaylist.setModel(playListModel);
	// add 'Playlist' to model in order to show user this is the playlist list
	playListModel.addElement("Playlist");
	// initialise track to album details hashmap
	trackAlbumHashMap = new HashMap<>();
   }

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents()
   {

      jPanel1 = new javax.swing.JPanel();
      jButton2 = new javax.swing.JButton();
      jButtonSavePlaylist = new javax.swing.JButton();
      jButton1 = new javax.swing.JButton();
      jPanel2 = new javax.swing.JPanel();
      jButtonClearPlaylist = new javax.swing.JButton();
      jButtonAddTrack = new javax.swing.JButton();
      jButton6 = new javax.swing.JButton();
      jButton4 = new javax.swing.JButton();
      jButton7 = new javax.swing.JButton();
      jButton5 = new javax.swing.JButton();
      jButtonRemoveTrack = new javax.swing.JButton();
      jPanel3 = new javax.swing.JPanel();
      jScrollPane1 = new javax.swing.JScrollPane();
      jListAlbums = new javax.swing.JList<>();
      jPanel4 = new javax.swing.JPanel();
      jScrollPane2 = new javax.swing.JScrollPane();
      jListPlaylist = new javax.swing.JList<>();
      jLabel2 = new javax.swing.JLabel();
      jPanel5 = new javax.swing.JPanel();
      jScrollPane3 = new javax.swing.JScrollPane();
      jListTracks = new javax.swing.JList<>();
      jLabel1 = new javax.swing.JLabel();
      jLabelAlbumTitleAndArtist = new javax.swing.JLabel();

      setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
      setTitle("Music Album and Playlist Editing System");

      jPanel1.setBackground(new java.awt.Color(76, 76, 76));
      jPanel1.setForeground(new java.awt.Color(255, 255, 255));

      jButton2.setBackground(new java.awt.Color(76, 76, 76));
      jButton2.setForeground(new java.awt.Color(255, 255, 255));
      jButton2.setText("Load Playlist");
      jButton2.setToolTipText("");
      jButton2.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            jButton2jButtonLoadPlaylistActionPerformed(evt);
         }
      });

      jButtonSavePlaylist.setBackground(new java.awt.Color(76, 76, 76));
      jButtonSavePlaylist.setForeground(new java.awt.Color(255, 255, 255));
      jButtonSavePlaylist.setText("Save Playlist");
      jButtonSavePlaylist.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            jButtonSavePlaylistActionPerformed(evt);
         }
      });

      jButton1.setBackground(new java.awt.Color(76, 76, 76));
      jButton1.setForeground(new java.awt.Color(255, 255, 255));
      jButton1.setText("Load Albums");
      jButton1.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            jButton1jButtonLoadAlbumsActionPerformed(evt);
         }
      });

      javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
      jPanel1.setLayout(jPanel1Layout);
      jPanel1Layout.setHorizontalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
            .addGap(74, 74, 74)
            .addComponent(jButton1)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 536, Short.MAX_VALUE)
            .addComponent(jButton2)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jButtonSavePlaylist)
            .addGap(34, 34, 34))
      );
      jPanel1Layout.setVerticalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addGap(9, 9, 9)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jButtonSavePlaylist)
               .addComponent(jButton2)
               .addComponent(jButton1))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );

      getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

      jPanel2.setBackground(new java.awt.Color(76, 76, 76));
      jPanel2.setForeground(new java.awt.Color(255, 255, 255));
      jPanel2.setPreferredSize(new java.awt.Dimension(960, 40));

      jButtonClearPlaylist.setBackground(new java.awt.Color(76, 76, 76));
      jButtonClearPlaylist.setForeground(new java.awt.Color(255, 255, 255));
      jButtonClearPlaylist.setText("Clear Playlist");
      jButtonClearPlaylist.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            jButtonClearPlaylistActionPerformed(evt);
         }
      });

      jButtonAddTrack.setBackground(new java.awt.Color(76, 76, 76));
      jButtonAddTrack.setForeground(new java.awt.Color(255, 255, 255));
      jButtonAddTrack.setText(">>");
      jButtonAddTrack.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            jButtonAddTrackActionPerformed(evt);
         }
      });

      jButton6.setBackground(new java.awt.Color(76, 76, 76));
      jButton6.setForeground(new java.awt.Color(255, 255, 255));
      jButton6.setText("Back");

      jButton4.setBackground(new java.awt.Color(76, 76, 76));
      jButton4.setForeground(new java.awt.Color(255, 255, 255));
      jButton4.setText("Play");
      jButton4.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            jButton4jButtonPlayActionPerformed(evt);
         }
      });

      jButton7.setBackground(new java.awt.Color(76, 76, 76));
      jButton7.setForeground(new java.awt.Color(255, 255, 255));
      jButton7.setText("Stop");
      jButton7.setToolTipText("");
      jButton7.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            jButton7jButtonStopActionPerformed(evt);
         }
      });

      jButton5.setBackground(new java.awt.Color(76, 76, 76));
      jButton5.setForeground(new java.awt.Color(255, 255, 255));
      jButton5.setText("Forward");

      jButtonRemoveTrack.setBackground(new java.awt.Color(76, 76, 76));
      jButtonRemoveTrack.setForeground(new java.awt.Color(255, 255, 255));
      jButtonRemoveTrack.setText("<<");
      jButtonRemoveTrack.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            jButtonRemoveTrackActionPerformed(evt);
         }
      });

      javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
      jPanel2.setLayout(jPanel2Layout);
      jPanel2Layout.setHorizontalGroup(
         jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel2Layout.createSequentialGroup()
            .addGap(351, 351, 351)
            .addComponent(jButton6)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jButton4)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jButton7)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jButton5)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 100, Short.MAX_VALUE)
            .addComponent(jButtonRemoveTrack)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jButtonClearPlaylist, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jButtonAddTrack, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(19, 19, 19))
      );
      jPanel2Layout.setVerticalGroup(
         jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel2Layout.createSequentialGroup()
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                  .addComponent(jButtonClearPlaylist)
                  .addComponent(jButtonAddTrack)
                  .addComponent(jButtonRemoveTrack))
               .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                  .addComponent(jButton6)
                  .addComponent(jButton4)
                  .addComponent(jButton7)
                  .addComponent(jButton5)))
            .addContainerGap())
      );

      getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

      jPanel3.setBackground(new java.awt.Color(76, 76, 76));
      jPanel3.setForeground(new java.awt.Color(255, 255, 255));
      jPanel3.setPreferredSize(new java.awt.Dimension(250, 344));

      jListAlbums.setBackground(new java.awt.Color(76, 76, 76));
      jListAlbums.setForeground(new java.awt.Color(255, 255, 255));
      jListAlbums.setModel(new javax.swing.AbstractListModel<String>()
      {
         String[] strings = { "Album List" };
         public int getSize() { return strings.length; }
         public String getElementAt(int i) { return strings[i]; }
      });
      jListAlbums.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
      jListAlbums.setName("Album List"); // NOI18N
      jListAlbums.setSelectionBackground(new java.awt.Color(51, 181, 229));
      jListAlbums.addListSelectionListener(new javax.swing.event.ListSelectionListener()
      {
         public void valueChanged(javax.swing.event.ListSelectionEvent evt)
         {
            jListAlbumsValueChanged(evt);
         }
      });
      jScrollPane1.setViewportView(jListAlbums);

      javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
      jPanel3.setLayout(jPanel3Layout);
      jPanel3Layout.setHorizontalGroup(
         jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE))
      );
      jPanel3Layout.setVerticalGroup(
         jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 441, Short.MAX_VALUE)
      );

      getContentPane().add(jPanel3, java.awt.BorderLayout.LINE_START);

      jPanel4.setBackground(new java.awt.Color(76, 76, 76));
      jPanel4.setForeground(new java.awt.Color(255, 255, 255));
      jPanel4.setPreferredSize(new java.awt.Dimension(250, 355));

      jListPlaylist.setBackground(new java.awt.Color(76, 76, 76));
      jListPlaylist.setForeground(new java.awt.Color(255, 255, 255));
      jListPlaylist.setModel(new javax.swing.AbstractListModel<String>()
      {
         String[] strings = { "Playlist" };
         public int getSize() { return strings.length; }
         public String getElementAt(int i) { return strings[i]; }
      });
      jListPlaylist.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
      jListPlaylist.setSelectionBackground(new java.awt.Color(51, 181, 229));
      jListPlaylist.addListSelectionListener(new javax.swing.event.ListSelectionListener()
      {
         public void valueChanged(javax.swing.event.ListSelectionEvent evt)
         {
            jListPlaylistValueChanged(evt);
         }
      });
      jScrollPane2.setViewportView(jListPlaylist);

      jLabel2.setBackground(new java.awt.Color(76, 76, 76));
      jLabel2.setForeground(new java.awt.Color(255, 255, 255));
      jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
      jLabel2.setText("jLabel2");

      javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
      jPanel4.setLayout(jPanel4Layout);
      jPanel4Layout.setHorizontalGroup(
         jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
               .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addContainerGap())
      );
      jPanel4Layout.setVerticalGroup(
         jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel4Layout.createSequentialGroup()
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 408, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
      );

      getContentPane().add(jPanel4, java.awt.BorderLayout.LINE_END);

      jPanel5.setBackground(new java.awt.Color(76, 76, 76));
      jPanel5.setForeground(new java.awt.Color(255, 255, 255));

      jListTracks.setBackground(new java.awt.Color(76, 76, 76));
      jListTracks.setForeground(new java.awt.Color(255, 255, 255));
      jListTracks.setModel(new javax.swing.AbstractListModel<String>()
      {
         String[] strings = { "Track list for Album" };
         public int getSize() { return strings.length; }
         public String getElementAt(int i) { return strings[i]; }
      });
      jListTracks.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
      jListTracks.setSelectionBackground(new java.awt.Color(51, 181, 229));
      jListTracks.addListSelectionListener(new javax.swing.event.ListSelectionListener()
      {
         public void valueChanged(javax.swing.event.ListSelectionEvent evt)
         {
            jListTracksValueChanged(evt);
         }
      });
      jScrollPane3.setViewportView(jListTracks);

      jLabel1.setBackground(new java.awt.Color(76, 76, 76));
      jLabel1.setForeground(new java.awt.Color(255, 255, 255));
      jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
      jLabel1.setMinimumSize(new java.awt.Dimension(1, 1));

      jLabelAlbumTitleAndArtist.setBackground(new java.awt.Color(76, 76, 76));
      jLabelAlbumTitleAndArtist.setForeground(new java.awt.Color(255, 255, 255));
      jLabelAlbumTitleAndArtist.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

      javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
      jPanel5.setLayout(jPanel5Layout);
      jPanel5Layout.setHorizontalGroup(
         jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel5Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(jLabelAlbumTitleAndArtist, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 407, Short.MAX_VALUE))
            .addContainerGap())
      );
      jPanel5Layout.setVerticalGroup(
         jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel5Layout.createSequentialGroup()
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabelAlbumTitleAndArtist, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
      );

      getContentPane().add(jPanel5, java.awt.BorderLayout.CENTER);

      pack();
   }// </editor-fold>//GEN-END:initComponents

   private void jButton1jButtonLoadAlbumsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton1jButtonLoadAlbumsActionPerformed
   {//GEN-HEADEREND:event_jButton1jButtonLoadAlbumsActionPerformed
      System.out.println("Loading albums");

      // prompt user to select text file containing album data
      String filename = getTextFilePath("LOAD");
      // read album data into program and add to album collection
      myAlbumCollection.readAlbumCollectionFromFile(filename);
      // List albums in jList
      DefaultListModel<String> albumList = new DefaultListModel<>();
      jListAlbums.setModel(albumList);
      for (Album album : myAlbumCollection.getAlbums())
      {
         albumList.addElement(album.getAlbumArtist() + " : " + album.getAlbumTitle());
      }
   }//GEN-LAST:event_jButton1jButtonLoadAlbumsActionPerformed

   private void jListAlbumsValueChanged(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_jListAlbumsValueChanged
   {//GEN-HEADEREND:event_jListAlbumsValueChanged
      // TODO add your handling code here:
      //System.out.println("Item selected" + jListAlbums.getSelectedValue());
      DefaultListModel<String> albumDetailsList = new DefaultListModel<>();
      jListTracks.setModel(albumDetailsList);

      // Get selected album title from album list
      String albumTitle = jListAlbums.getSelectedValue();

      // Do nothing if 'Album List' placeholder selected
      if (albumTitle != null && !albumTitle.equals("Album List"))
      {
         albumTitle = albumTitle.split(":", 2)[1].trim();
         Album album = myAlbumCollection.getAlbumByTitle(albumTitle);
         String albumArtist = album.getAlbumArtist();

         //	   // print album details to list - using html allows line breaks
         //	   jLabelAlbumTitleAndArtist.setText("<html><body>Album Title &emsp;: "
            //		     + albumTitle + "<br>Album Artist&emsp;: "
            //		     + albumArtist + "<br>Album Duration&emsp;: "
            //		     + album.getAlbumDuration() + "</body></html>");
         jLabelAlbumTitleAndArtist.setText(albumArtist + " : " + albumTitle
            + " (Duration: " + album.getAlbumDuration() + ")");

         for (Track track : album.getTracks())
         {
            albumDetailsList.addElement(track.getTrackDuration() + " - "
               + track.getTrackTitle());
         }

         // initiate a new image icon to display album cover
         ImageIcon image = new ImageIcon();
         // get list of image files
         File folder = new File(workingDir + "/images/");
         System.out.println(folder);

         File[] fileList = folder.listFiles();

         for (File file : fileList)
         {
            // check file is a file and not a directory
            if (file.isFile())
            {
               String fileName = file.getName();
               //System.out.println("Filename: " + fileName);
               String shortTitle = albumTitle.toLowerCase();

               // remove certain key words as 'special' examples. This is a
               // system limitation and may not be robust. Consider renaming
               // image files to consistent format and/or including artist in
               // key string search
               // remove 'the' or 'neils' from start of album title
               if (shortTitle.startsWith("the "))
               {
                  shortTitle = shortTitle.substring(4, shortTitle.length());
               } else if (shortTitle.startsWith("neil's "))
               {
                  shortTitle = shortTitle.substring(7, shortTitle.length());
               }
               // remove trailing 'music' or 'album'
               if (shortTitle.endsWith(" album")
                  || shortTitle.endsWith(" music"))
               {
                  shortTitle = shortTitle.substring(0, shortTitle.length() - 6);
               }

               // remove white space and special characters
               shortTitle = shortTitle.replaceAll("\\s+", "").replaceAll(
                  "[-+.^:,?']", "").toLowerCase();

               // TODO include artist in file title search
               if (fileName.toLowerCase().contains(shortTitle))
               {
                  //System.out.println("Match found");
                  ImageIcon tempImage = new ImageIcon(workingDir
                     + "/images/" + fileName);
                  image = getScaledImage(tempImage, jLabel1);
               }
            }
         }
         jLabel1.setIcon(image);
      }
   }//GEN-LAST:event_jListAlbumsValueChanged

   private void jListTracksValueChanged(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_jListTracksValueChanged
   {//GEN-HEADEREND:event_jListTracksValueChanged
      // Clear playlist selection if item being selected in tracks list. Ensure
      // this is not triggered by a deselect event from playlistValueChanged
      if(jListTracks.getValueIsAdjusting())
      {
         jListPlaylist.clearSelection();
      }

   }//GEN-LAST:event_jListTracksValueChanged

   private void jListPlaylistValueChanged(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_jListPlaylistValueChanged
   {//GEN-HEADEREND:event_jListPlaylistValueChanged
      // TODO add your handling code here:
      if(jListPlaylist.getValueIsAdjusting())
      {
         jListTracks.clearSelection();
      }

	// Get and display album info under album image
	String[] split = jListPlaylist.getSelectedValue().split(" - ", 2);
	PlaylistTrack track = playlist.getTrackByNameAndDuration(split[1], split[0]);
	Album album = track.getPlaylistTrackAlbum();
	String albumArtist = album.getAlbumArtist();
	String albumTitle = album.getAlbumTitle();
	
	jLabelAlbumTitleAndArtist.setText(albumArtist + " : " + albumTitle
            + " (Duration: " + album.getAlbumDuration() + ")");

	//jLabel2.setText("Playlist Duration: " + playlist.getPlaylistDuration());
	
	// TODO set album pic
   }//GEN-LAST:event_jListPlaylistValueChanged

   private void jButton2jButtonLoadPlaylistActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton2jButtonLoadPlaylistActionPerformed
   {//GEN-HEADEREND:event_jButton2jButtonLoadPlaylistActionPerformed
      System.out.println("Loading playlist");

      // prompt user to select text file containing playlist info
      String filename = getTextFilePath("LOAD");
      // create new playlist object and read playlist data into it
      Playlist playlist = new Playlist(myAlbumCollection);
      playlist.loadPlaylist(filename);
      // List playlist tracks in jList
      playListModel = new DefaultListModel<>();
      jListPlaylist.setModel(playListModel);
      for (PlaylistTrack track : playlist.getPlaylistTracks())
      {
         playListModel.addElement(track.getTrackDuration() + " - " + track.getTrackTitle());
      }
	
	
   }//GEN-LAST:event_jButton2jButtonLoadPlaylistActionPerformed

   private void jButtonSavePlaylistActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonSavePlaylistActionPerformed
   {//GEN-HEADEREND:event_jButtonSavePlaylistActionPerformed
      try
      {
         // TODO get tracks from playlist and save as file:
         String filename = getTextFilePath("SAVE");
         if(!filename.endsWith(".txt"))
         {
            filename += ".txt";
         }
         BufferedWriter bw = new BufferedWriter(new FileWriter(filename));

         int iMax = playListModel.getSize();
         for (int i = 0; i < iMax; i++)
         {
            String trackStr = playListModel.getElementAt(i);
            String[] split = trackStr.split(" - ", 2);
            String track = split[1];
            System.out.println("Track: " + track);
            //		String duration = split[0];

            //String albumStr = trackAlbumHashMap.get(track);
            track += " (" + trackAlbumHashMap.get(trackStr) + ")";
            //
            //		myAlbumCollection.getAlbumByTitle(track);
            // Write output to bufferedWriter
            bw.write(track);
            bw.newLine();
         }
         bw.flush();
      }
      catch (Exception ex)
      {
         Logger.getLogger(MapesUI.class.getName()).log(Level.SEVERE, null, ex);
      }

   }//GEN-LAST:event_jButtonSavePlaylistActionPerformed

   private void jButton4jButtonPlayActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton4jButtonPlayActionPerformed
   {//GEN-HEADEREND:event_jButton4jButtonPlayActionPerformed
      System.out.println("Play Track");

      // Get selected track title from tracklist or playlist
      String trackTitle = null;
      if(jListTracks.getSelectedIndex() > -1)
      {
         trackTitle = jListTracks.getSelectedValue();
      }
      else if (jListPlaylist.getSelectedIndex() > -1)
      {
         trackTitle = jListPlaylist.getSelectedValue();
      }

      if(trackTitle != null && trackTitle != "Playlist")
      {
         // remove duration from track title
         trackTitle = trackTitle.split("-", 2)[1].trim();
         // convert trackTitle to audio file name format
         trackTitle = trackTitle.replaceAll(" ", "_").toLowerCase();
         System.out.println(trackTitle);

         File folder = new File(workingDir + "/audio/");
         System.out.println(folder);

         // create list to store all mp3 files
         List<File> files = new ArrayList<>();

         getMp3AllSubDirs(files, folder);
         File mp3File = null;
         boolean fileFound = false;
         for(File file : files)
         {
            System.out.println(file.getName());
            if(file.getName().toLowerCase().contains("_" + trackTitle + ".mp3"))
            {
               mp3File = file;
               fileFound = true;
               break;
            }
         }

         if(fileFound)
         {
            mp3.close();
            mp3.play(mp3File.getAbsolutePath());
            System.out.println("Playing mp3 file:" + mp3File.getName());
         }
         else
         {
            System.out.println("Track file not found");
         }

      }
      else
      {
         System.out.println("No track selected");
      }
   }//GEN-LAST:event_jButton4jButtonPlayActionPerformed

   private void jButton7jButtonStopActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton7jButtonStopActionPerformed
   {//GEN-HEADEREND:event_jButton7jButtonStopActionPerformed
      // TODO add your handling code here:
      System.out.println("stopping mp3");
      mp3.close();
   }//GEN-LAST:event_jButton7jButtonStopActionPerformed

   private void jButtonRemoveTrackActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonRemoveTrackActionPerformed
   {//GEN-HEADEREND:event_jButtonRemoveTrackActionPerformed
      // Remove track from playlist and tracking hashmap if track selected
      if(jListPlaylist.getSelectedIndex() > -1)
      {
         playListModel.remove(jListPlaylist.getSelectedIndex());
         trackAlbumHashMap.remove(jListPlaylist.getSelectedValue());
      }

   }//GEN-LAST:event_jButtonRemoveTrackActionPerformed

   private void jButtonClearPlaylistActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonClearPlaylistActionPerformed
   {//GEN-HEADEREND:event_jButtonClearPlaylistActionPerformed
      // TODO add your handling code here:
      playListModel.clear();
      trackAlbumHashMap.clear();
	playlist.clearPlaylist();
   }//GEN-LAST:event_jButtonClearPlaylistActionPerformed

   private void jButtonAddTrackActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonAddTrackActionPerformed
   {//GEN-HEADEREND:event_jButtonAddTrackActionPerformed
      // Add a track from list of album tracks to the playlist
      if(playListModel.getSize() == 1 &&
					   playListModel.elementAt(0).equals("Playlist"))
      {
	   // Remove placeholder if necessary
         playListModel.removeElementAt(0);
      }
	String trackStr = jListTracks.getSelectedValue();
      playListModel.addElement(trackStr);
	// add item to Playlist object
	String[] split = trackStr.split(" - ", 2);
	getPlaylist();
//	System.out.println(split[1]);
//	System.out.println(split[0]);
//	System.out.println(jListAlbums.getSelectedValue().split(" : ", 2)[1]);
	playlist.addPlaylistTrack(new PlaylistTrack(split[1], 
		  new Duration(split[0]), 
		  myAlbumCollection.getAlbumByTitle(
			         jListAlbums.getSelectedValue().split(" : ", 2)[1])));
      // Store track title and album details of playlist items in hashmap
      System.out.println("Adding: " + jListTracks.getSelectedValue()+ ", " +
         jListAlbums.getSelectedValue());
      trackAlbumHashMap.put(jListTracks.getSelectedValue(),
         jListAlbums.getSelectedValue());
      //System.out.println(trackAlbumHashMap.get(jListTracks.getSelectedValue()));
	
	jLabel2.setText("Playlist Duration: " + playlist.getPlaylistDuration());
   }//GEN-LAST:event_jButtonAddTrackActionPerformed

   // Method to initialise playlist if not done all ready
   private void getPlaylist()
   {
	if(playlist == null)
	{
	   playlist = new Playlist(myAlbumCollection);
	}
   }
    
   
   private String getTextFilePath(String option)
   {
	// use JFileChooser to select album text file
	try
	{
	   String filename = "";
	   // launch file chooser in current working directory
	   JFileChooser fileChooser = new JFileChooser(workingDir);
	   FileFilter filter = new FileNameExtensionFilter("Text File", "txt");
	   fileChooser.setFileFilter(filter);

	   Component c1 = null;
	   
	   if(option.equals("LOAD"))
	   {
		fileChooser.showOpenDialog(c1);
	   }
	   else if(option.equals("SAVE"))
	   {
		fileChooser.showSaveDialog(c1);
	   }
	   
	   

	   File albumListing = fileChooser.getSelectedFile();
	   filename = albumListing.getAbsolutePath();

	   workingDir = albumListing.getParentFile().getAbsolutePath();

	   System.out.println(filename);
	   System.out.println(workingDir);

	   //check the file format 
	   String fileType = fileChooser.getTypeDescription(albumListing);
	   System.out.println("file type = " + fileType);

	   return filename;
	} catch (Exception e)
	{
	   System.err.println(e);
	}
	return null;
   }
   
   // Method to get scaled dimensions of album cover
   private ImageIcon getScaledImage(ImageIcon image, JLabel jLabel)
   {
	// variables to store image and label dimensions
	int imageWidth = image.getIconWidth();
	int imageHeight = image.getIconHeight();
	int labelWidth = jLabel.getWidth();
	int labelHeight = jLabel.getHeight();
	System.out.println(imageWidth + ", " + imageHeight + ", " + labelWidth
		  + ", " + labelHeight);
	// variables to store scaled dimensions
	int scaledWidth;
	int scaledHeight;

	// match width of image to width of label
	scaledWidth = labelWidth;
	scaledHeight = (int) (imageHeight * (labelWidth / (float) imageWidth));

	// if height too great, scale image down to fit height to window
	if (scaledHeight > labelHeight)
	{
	   scaledWidth = (int) (scaledWidth
		     * (labelHeight / (float) scaledHeight));
	   scaledHeight = labelHeight;
	}

	// create and return scaled image
	return new ImageIcon(image.getImage().getScaledInstance(scaledWidth,
		  scaledHeight, Image.SCALE_SMOOTH));
   }
   
   /**
    * Method to loop through folder and all subfolders and add mp3 files found 
    * to list
    * @param files
    * @param folder 
    */
   private void getMp3AllSubDirs(List<File> files, File folder)
   {
	// get list of all files in folder
	File[] fileList = folder.listFiles();
	// loop over list of files check for file or directory
	for(File file : fileList)
	{
//	   System.out.println(file.getName());
	   // if file, check its mp3 and if so add to the list
	   if(file.isFile())
	   {
		String ext = file.getName();
		ext = ext.substring(ext.lastIndexOf(".") + 1);
		if(ext.equals("mp3"))
		{
		   files.add(file);
		}
	   }
	   // if file is a directory, call this method again to look for files 
	   // further down that branch
	   else if(file.isDirectory())
	   {
		getMp3AllSubDirs(files, file);
	   }
	}
   }
   
   /**
    * @param args the command line arguments
    */
   public static void main(String args[])
   {
	/* Set the Nimbus look and feel */
	//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
	/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
	 */
	try
	{
	   for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
	   {
		if ("Nimbus".equals(info.getName()))
		{
		   javax.swing.UIManager.setLookAndFeel(info.getClassName());
		   break;
		}
	   }
	} catch (ClassNotFoundException ex)
	{
	   java.util.logging.Logger.getLogger(MapesUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (InstantiationException ex)
	{
	   java.util.logging.Logger.getLogger(MapesUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (IllegalAccessException ex)
	{
	   java.util.logging.Logger.getLogger(MapesUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (javax.swing.UnsupportedLookAndFeelException ex)
	{
	   java.util.logging.Logger.getLogger(MapesUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	}
	//</editor-fold>

	/* Create and display the form */
	java.awt.EventQueue.invokeLater(new Runnable() {
	   public void run()
	   {
		new MapesUI().setVisible(true);
	   }
	});
   }

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton jButton1;
   private javax.swing.JButton jButton2;
   private javax.swing.JButton jButton4;
   private javax.swing.JButton jButton5;
   private javax.swing.JButton jButton6;
   private javax.swing.JButton jButton7;
   private javax.swing.JButton jButtonAddTrack;
   private javax.swing.JButton jButtonClearPlaylist;
   private javax.swing.JButton jButtonRemoveTrack;
   private javax.swing.JButton jButtonSavePlaylist;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabelAlbumTitleAndArtist;
   private javax.swing.JList<String> jListAlbums;
   private javax.swing.JList<String> jListPlaylist;
   private javax.swing.JList<String> jListTracks;
   private javax.swing.JPanel jPanel1;
   private javax.swing.JPanel jPanel2;
   private javax.swing.JPanel jPanel3;
   private javax.swing.JPanel jPanel4;
   private javax.swing.JPanel jPanel5;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JScrollPane jScrollPane2;
   private javax.swing.JScrollPane jScrollPane3;
   // End of variables declaration//GEN-END:variables
}
